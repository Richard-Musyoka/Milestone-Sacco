@layout DefaultLayout
@page "/login"
@using SaccoManagementSystem.Models
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory

<div class="split-container">
    <div class="split-left">
        <!-- Optional image or background -->
    </div>

    <div class="split-right">
        <div class="login-card card p-4 shadow-lg rounded">
            <div class="login-header text-center mb-3">
                <img src="/images/logo.png" alt="Sacco Logo" style="max-width: 80px;" />
                <h2 class="mt-2">Tajiri Sacco Portal</h2>
            </div>

            <hr />

            <h4 class="text-center mb-3">Login</h4>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success text-center">@successMessage</div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center">@errorMessage</div>
            }

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" />
                    <label class="form-check-label">Remember me</label>
                </div>

                <button type="submit" class="btn btn-success w-100 py-2 d-flex align-items-center justify-content-center">Login</button>

                <div class="text-center mt-3">
                    <a href="/register">Don't have an account? Register</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                successMessage = result?.Message ?? "Login successful!";

                // Optionally wait briefly to let user see success
                await Task.Delay(1000);

                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                ApiResponse? result = null;
                try
                {
                    result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                }
                catch
                {
                    // No valid JSON response
                }

                errorMessage = result?.Message ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = false;
    }

    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}

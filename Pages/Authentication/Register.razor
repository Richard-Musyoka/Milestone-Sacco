@page "/register"
@layout DefaultLayout
@using SaccoManagementSystem.Models
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory

<div class="split-container">
    <div class="split-left d-flex align-items-center justify-content-center">
        <img src="/images/register-illustration.png" alt="Illustration" class="img-fluid" />
    </div>

    <div class="split-right d-flex align-items-center justify-content-center">
        <div class="register-card card p-5 shadow rounded-4" style="max-width: 700px; width: 100%;">
            <div class="login-header text-center mb-4">
                <img src="/images/logo.png" alt="Sacco Logo" style="max-height: 80px;" />
                <h2 class="mt-3 fw-bold">Tajiri Sacco Portal</h2>
            </div>

            <h3 class="text-center mb-3 fw-semibold">Create Account</h3>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success text-center">@successMessage</div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center">@errorMessage</div>
            }

            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">First Name <span class="text-danger">*</span></label>
                        <InputText @bind-Value="registerModel.FirstName" class="form-control" placeholder="Enter first name" />
                        <ValidationMessage For="@(() => registerModel.FirstName)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Middle Name</label>
                        <InputText @bind-Value="registerModel.MiddleName" class="form-control" placeholder="Enter middle name (optional)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Last Name <span class="text-danger">*</span></label>
                        <InputText @bind-Value="registerModel.LastName" class="form-control" placeholder="Enter last name" />
                        <ValidationMessage For="@(() => registerModel.LastName)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Username</label>
                        <InputText @bind-Value="registerModel.UserName" class="form-control" placeholder="Enter username (optional)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Phone Number</label>
                        <InputText @bind-Value="registerModel.PhoneNumber" class="form-control" placeholder="Enter phone number (optional)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Email <span class="text-danger">*</span></label>
                        <InputText @bind-Value="registerModel.Email" class="form-control" placeholder="Enter email address" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Password <span class="text-danger">*</span></label>
                        <InputText @bind-Value="registerModel.Password" type="password" class="form-control" placeholder="Enter password" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Confirm Password <span class="text-danger">*</span></label>
                        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" placeholder="Confirm password" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>
                </div>

                <button type="submit" class="btn btn-success w-100 py-2 d-flex align-items-center justify-content-center">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Submitting...</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>

                <div class="text-center mt-3">
                    <small>
                        Already have an account? <a href="/login" class="text-primary">Login</a>
                    </small>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    private async Task HandleRegister()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        isSubmitting = true;

        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/Auth/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Registration successful! Redirecting...";
                await Task.Delay(1500);
                Navigation.NavigateTo("/login", true);
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                errorMessage = result?.Message ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}

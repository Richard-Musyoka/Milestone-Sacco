@page "/contributions"
@using Microsoft.AspNetCore.Components
@using SaccoManagementSystem.Models
@inject NavigationManager NavigationManager
@inject IHttpClientFactory _httpClientFactory

<!-- Main Container -->
<div class="">

    <!-- Header Section -->
    <div class="contributions-header mb-4">
        <div class="header-title">
            <i class="bi bi-cash-stack header-icon"></i>
            <h2>Member Contributions</h2>
        </div>

        <!-- Search and Add Button -->
        <div class="header-actions">
            <div class="search-box">
                <i class="bi bi-search"></i>
                <input type="text"
                       class="form-control"
                       placeholder="Search contributions..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
            </div>

            <button class="btn btn-primary add-contribution-btn"
                    @onclick="NavigateToAddContribution">
                <i class="bi bi-plus-circle"></i>
                <span>Add Contribution</span>
            </button>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="filters mb-3">
        <div class="row g-2">
            <!-- Contribution Type Filter -->
            <div class="col-md-4">
                <select class="form-select" @bind="contributionTypeFilter">
                    <option value="">All Types</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Share">Share</option>
                    <option value="Loan">Loan Repayment</option>
                    <option value="Special">Special</option>
                </select>
            </div>

            <!-- Status Filter -->
            <div class="col-md-4">
                <select class="form-select" @bind="statusFilter">
                    <option value="">All Statuses</option>
                    <option value="Confirmed">Paid</option>
                    <option value="Pending">Pending</option>
                    <option value="Overdue">Overdue</option>
                </select>
            </div>

            <!-- Reset Button -->
            <div class="col-md-4">
                <button class="btn btn-outline-secondary w-100" @onclick="ResetFilters">
                    <i class="bi bi-arrow-counterclockwise"></i> Reset Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="summary-cards mb-4">
        <div class="row">
            <!-- Total Contributions Card -->
            <div class="col-md-3">
                <div class="card summary-card total">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Total Contributions</h6>
                                <h3>@totalContributions.ToString("C")</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-wallet2"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Paid Contributions Card -->
            <div class="col-md-3">
                <div class="card summary-card paid">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Paid</h6>
                                <h3>@paidContributions.ToString("C")</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-check-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Pending Contributions Card -->
            <div class="col-md-3">
                <div class="card summary-card pending">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Pending</h6>
                                <h3>@pendingContributions.ToString("C")</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-hourglass"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Overdue Contributions Card -->
            <div class="col-md-3">
                <div class="card summary-card overdue">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Overdue</h6>
                                <h3>@overdueContributions.ToString("C")</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-exclamation-triangle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Contributions Table -->
    <div class="contributions-table-container">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading contributions...</p>
            </div>
        }
        else if (filteredContributions.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Receipt No.</th>
                            <th>Member</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var contribution in pagedContributions)
                        {
                            <tr>
                                <td>@($"CT-{contribution.ContributionId.ToString("D3")}")</td>
                                <td>
                                    <div class="fw-semibold">@contribution.MemberName</div>
                                    <small class="text-muted">ID: @contribution.MemberId</small>
                                </td>
                                <td>@contribution.Type</td>
                                <td>@contribution.Amount.ToString("C")</td>
                                <td>@contribution.Date.ToString("d")</td>
                                <td>
                                    <span class="badge @GetStatusClass(contribution.Status)">
                                        @(contribution.Status == "Confirmed" ? "Paid" : contribution.Status)
                                    </span>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-outline-primary btn-sm"
                                            @onclick="() => ViewContribution(contribution.ContributionId)"
                                            title="View">View
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm"
                                            @onclick="() => EditContribution(contribution.ContributionId)"
                                            title="Edit">Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm"
                                            @onclick="() => ConfirmDelete(contribution)"
                                            title="Delete">Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <nav class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            }
        }
        else
        {
            <div class="empty-state text-center py-5">
                <i class="bi bi-cash-stack empty-icon"></i>
                <h4>No contributions found</h4>
                <p>Try adjusting your search or add a new contribution</p>
                <button class="btn btn-primary" @onclick="NavigateToAddContribution">
                    <i class="bi bi-plus-circle me-2"></i>
                    Add Contribution
                </button>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Delete contribution <strong>@($"CT-{contributionToDelete?.ContributionId.ToString("D3")}")</strong>?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteContribution">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HttpClient Http => _httpClientFactory.CreateClient("ApiClient");
    private List<ContributionViewModel> contributions = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    // Filter properties
    private string searchTerm = string.Empty;
    private string contributionTypeFilter = string.Empty;
    private string statusFilter = string.Empty;

    // Pagination properties
    private int currentPage = 1;
    private const int pageSize = 10;

    // Delete modal properties
    private bool showDeleteModal = false;
    private ContributionViewModel? contributionToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadContributions();
    }

    private async Task LoadContributions()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Force UI update

            var response = await Http.GetFromJsonAsync<List<ContributionViewModel>>("api/contributions/get-all");

            if (response != null)
            {
                contributions = response;
                // Transform "Confirmed" status to "Paid" for display
                foreach (var contribution in contributions)
                {
                    if (contribution.Status == "Confirmed")
                    {
                        contribution.Status = "Paid";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load contributions. Please try again.";
            Console.WriteLine($"Error loading contributions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Summary calculations
    private decimal totalContributions => filteredContributions.Sum(c => c.Amount);
    private decimal paidContributions => filteredContributions
        .Where(c => c.Status == "Paid" || c.Status == "Confirmed")
        .Sum(c => c.Amount);
    private decimal pendingContributions => filteredContributions
        .Where(c => c.Status == "Pending")
        .Sum(c => c.Amount);
    private decimal overdueContributions => filteredContributions
        .Where(c => c.Status == "Overdue")
        .Sum(c => c.Amount);

    // Filtered contributions based on search and filters
    private IEnumerable<ContributionViewModel> filteredContributions => contributions
        .Where(c => string.IsNullOrEmpty(searchTerm) ||
                   c.MemberName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   c.ContributionId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   c.MemberId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(c => string.IsNullOrEmpty(contributionTypeFilter) || c.Type == contributionTypeFilter)
        .Where(c => string.IsNullOrEmpty(statusFilter) ||
                   (statusFilter == "Confirmed" && c.Status == "Paid") ||
                   c.Status == statusFilter);

    // Paginated results
    private IEnumerable<ContributionViewModel> pagedContributions => filteredContributions
        .OrderByDescending(c => c.Date)
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    // Calculate total pages for pagination
    private int totalPages => (int)Math.Ceiling((double)filteredContributions.Count() / pageSize);

    // Helper method to get CSS class for status badges
    private string GetStatusClass(string status) => status switch
    {
        "Paid" or "Confirmed" => "bg-success",
        "Pending" => "bg-warning text-dark",
        "Overdue" => "bg-danger",
        _ => "bg-secondary"
    };

    // Navigation methods
    private void NavigateToAddContribution() => NavigationManager.NavigateTo("/contributions/add");
    private void ViewContribution(int id) => NavigationManager.NavigateTo($"/contributions/view/{id}");
    private void EditContribution(int id) => NavigationManager.NavigateTo($"/contributions/edit/{id}");

    // Reset all filters
    private void ResetFilters()
    {
        searchTerm = string.Empty;
        contributionTypeFilter = string.Empty;
        statusFilter = string.Empty;
        currentPage = 1;
    }

    // Delete confirmation methods
    private void ConfirmDelete(ContributionViewModel contribution)
    {
        contributionToDelete = contribution;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        contributionToDelete = null;
    }

    private async Task DeleteContribution()
    {
        if (contributionToDelete != null)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/contributions/delete/{contributionToDelete.ContributionId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadContributions();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting contribution: {ex.Message}");
            }

            showDeleteModal = false;
            contributionToDelete = null;
        }
    }

    // Pagination navigation
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }
}
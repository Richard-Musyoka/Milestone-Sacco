@page "/dividends/declare"
@using Microsoft.AspNetCore.Components
@using SaccoManagementSystem.Models
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<div class="dividend-declaration-container">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <div class="header-title">
                <i class="bi bi-file-earmark-plus header-icon"></i>
                <h3>Declare New Dividend</h3>
            </div>
        </div>

        <div class="card-body">
            <EditForm Model="@dividendDeclaration" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Financial Year</label>
                        <InputSelect class="form-select" @bind-Value="dividendDeclaration.FinancialYear">
                            <option value="">Select Financial Year</option>
                            @foreach (var year in financialYears)
                            {
                                <option value="@year">@year</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => dividendDeclaration.FinancialYear)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Declaration Date</label>
                        <InputDate class="form-select" @bind-Value="dividendDeclaration.DeclarationDate" />
                        <ValidationMessage For="@(() => dividendDeclaration.DeclarationDate)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Dividend Rate</label>
                        <div class="input-group">
                            <InputNumber class="form-control" @bind-Value="dividendDeclaration.Rate"
                                         step="0.0001" min="0.0001" max="1" />
                            <span class="input-group-text">%</span>
                        </div>
                        <ValidationMessage For="@(() => dividendDeclaration.Rate)" />
                        <small class="text-muted">Enter as decimal (0.10 for 10%)</small>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Record Date</label>
                        <InputDate class="form-select" @bind-Value="dividendDeclaration.RecordDate" />
                        <ValidationMessage For="@(() => dividendDeclaration.RecordDate)" />
                        <small class="text-muted">Members must be registered by this date</small>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Target Payment Date</label>
                        <InputDate class="form-select" @bind-Value="dividendDeclaration.PaymentDate" />
                        <ValidationMessage For="@(() => dividendDeclaration.PaymentDate)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label">Notes</label>
                        <InputTextArea class="form-control" @bind-Value="dividendDeclaration.Notes" rows="3" />
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDeclaration" disabled="@isLoading">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        <i class="bi bi-calculator me-2"></i>Calculate Dividend
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Preview Section -->
    @if (showPreview)
    {
        <div class="card mt-4">
            <div class="card-header bg-info text-white">
                <h4><i class="bi bi-eye me-2"></i>Dividend Declaration Preview</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h5>Declaration Details</h5>
                        <dl class="row">
                            <dt class="col-sm-4">Financial Year</dt>
                            <dd class="col-sm-8">@dividendDeclaration.FinancialYear</dd>

                            <dt class="col-sm-4">Dividend Rate</dt>
                            <dd class="col-sm-8">@dividendDeclaration.Rate.ToString("P2")</dd>

                            <dt class="col-sm-4">Declaration Date</dt>
                            <dd class="col-sm-8">@dividendDeclaration.DeclarationDate.ToShortDateString()</dd>

                            <dt class="col-sm-4">Record Date</dt>
                            <dd class="col-sm-8">@dividendDeclaration.RecordDate?.ToShortDateString()</dd>

                            <dt class="col-sm-4">Payment Date</dt>
                            <dd class="col-sm-8">@dividendDeclaration.PaymentDate?.ToShortDateString()</dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <h5>Impact Summary</h5>
                        <dl class="row">
                            <dt class="col-sm-6">Eligible Members</dt>
                            <dd class="col-sm-6">@eligibleMembers.ToString("N0")</dd>

                            <dt class="col-sm-6">Total Shares</dt>
                            <dd class="col-sm-6">@totalShares.ToString("N0")</dd>

                            <dt class="col-sm-6">Total Dividend Pool</dt>
                            <dd class="col-sm-6">@((totalShares * dividendDeclaration.Rate).ToString("C"))</dd>

                            <dt class="col-sm-6">Average per Member</dt>
                            <dd class="col-sm-6">@((totalShares * dividendDeclaration.Rate / eligibleMembers).ToString("C"))</dd>
                        </dl>
                    </div>
                </div>

                <div class="alert alert-warning mt-3">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    This action will calculate dividends for all eligible members and cannot be undone.
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button class="btn btn-outline-secondary" @onclick="TogglePreview" disabled="@isLoading">
                        <i class="bi bi-pencil me-2"></i>Edit Details
                    </button>
                    <button class="btn btn-success" @onclick="ConfirmDeclaration" disabled="@isLoading">
                        <i class="bi bi-check-circle me-2"></i>Confirm and Declare Dividend
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private DividendDeclarationRequest dividendDeclaration = new();
    private bool showPreview = false;
    private bool isLoading = false;
    private decimal totalShares = 0;
    private int eligibleMembers = 0;
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    private List<string> financialYears = new()
    {
        DateTime.Now.Year + "/" + (DateTime.Now.Year + 1),
        DateTime.Now.AddYears(-1).Year + "/" + DateTime.Now.Year,
        DateTime.Now.AddYears(-2).Year + "/" + DateTime.Now.AddYears(-1).Year
    };

    protected override void OnInitialized()
    {
        dividendDeclaration.DeclarationDate = DateTime.Today;
        dividendDeclaration.RecordDate = DateTime.Today.AddDays(-30);
        dividendDeclaration.PaymentDate = DateTime.Today.AddDays(14);
        dividendDeclaration.Rate = 0.1m; // Default 10%
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        try
        {
            // Format the date properly for the API call
            var response = await Http.GetAsync(
                $"api/dividends/members/eligible-for-dividend?recordDate={dividendDeclaration.RecordDate:yyyy-MM-dd}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<EligibleMembersResponse>();
                totalShares = result?.TotalShares ?? 0;
                eligibleMembers = result?.EligibleMembersCount ?? 0;

                dividendDeclaration.TotalAmount = totalShares * dividendDeclaration.Rate;
                showPreview = true;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert",
                $"Error calculating dividend: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePreview()
    {
        showPreview = !showPreview;
    }

    private void CancelDeclaration()
    {
        NavigationManager.NavigateTo("/dividends");
    }

    private async Task ConfirmDeclaration()
    {
        isLoading = true;
        try
        {
            dividendDeclaration.TotalAmount = totalShares * dividendDeclaration.Rate;

            var response = await Http.PostAsJsonAsync("api/dividends/declarations", dividendDeclaration);

            if (response.IsSuccessStatusCode)
            {
                // Create a proper class to deserialize into
                var result = await response.Content.ReadFromJsonAsync<DeclarationResponse>();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Dividend declared successfully");
                NavigationManager.NavigateTo($"/dividends/declarations/{result.DeclarationId}");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error declaring dividend: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error declaring dividend: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Add this class to your @code block
    public class DeclarationResponse
    {
        public int DeclarationId { get; set; }
    }

    public class DividendDeclarationRequest
    {
        [Required(ErrorMessage = "Financial Year is required")]
        public string FinancialYear { get; set; } = string.Empty;

        [Required(ErrorMessage = "Declaration Date is required")]
        public DateTime DeclarationDate { get; set; }

        [Required(ErrorMessage = "Record Date is required")]
        public DateTime? RecordDate { get; set; }

        [Required(ErrorMessage = "Payment Date is required")]
        public DateTime? PaymentDate { get; set; }

        [Required(ErrorMessage = "Dividend Rate is required")]
        [Range(0.0001, 1, ErrorMessage = "Rate must be between 0.01% and 100%")]
        public decimal Rate { get; set; }

        public decimal TotalAmount { get; set; }
        public string Notes { get; set; } = string.Empty;
    }

    public class EligibleMembersResponse
    {
        public int EligibleMembersCount { get; set; }
        public decimal TotalShares { get; set; }
    }
}
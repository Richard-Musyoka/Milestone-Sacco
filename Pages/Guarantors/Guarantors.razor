@page "/guarantors"
@using Microsoft.AspNetCore.Components
@using SaccoManagementSystem.Models
@inject NavigationManager NavigationManager
@inject IHttpClientFactory _httpClientFactory

<style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --success-color: #4cc9f0;
        --warning-color: #f8961e;
        --danger-color: #f94144;
        --light-color: #f8f9fa;
        --dark-color: #212529;
    }

    .guarantors-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .guarantors-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .header-title h2 {
            margin: 0;
            font-weight: 600;
            color: var(--dark-color);
        }

    .header-icon {
        font-size: 1.75rem;
        color: var(--primary-color);
    }

    .header-actions {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .search-box {
        position: relative;
        display: flex;
        align-items: center;
    }

        .search-box i {
            position: absolute;
            left: 10px;
            color: #6c757d;
        }

        .search-box input {
            padding-left: 2.5rem;
            border-radius: 50px;
            border: 1px solid #dee2e6;
            height: 40px;
            min-width: 250px;
        }

    .add-guarantor-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        border-radius: 50px;
        padding: 0.5rem 1.25rem;
    }

    .summary-cards {
        margin-bottom: 2rem;
    }

    .summary-card {
        border-radius: 10px;
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        height: 100%;
    }

        .summary-card.total {
            border-left: 4px solid var(--primary-color);
        }

        .summary-card.active {
            border-left: 4px solid var(--success-color);
        }

        .summary-card.inactive {
            border-left: 4px solid var(--warning-color);
        }

        .summary-card .icon {
            font-size: 1.75rem;
            opacity: 0.2;
        }

        .summary-card.total .icon {
            color: var(--primary-color);
        }

        .summary-card.active .icon {
            color: var(--success-color);
        }

        .summary-card.inactive .icon {
            color: var(--warning-color);
        }

    .guarantors-table-container {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        padding: 1rem;
    }

    .table {
        margin-bottom: 0;
    }

        .table th {
            border-top: none;
            font-weight: 600;
            color: #495057;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
        }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
    }

        .badge.active {
            background-color: var(--success-color);
        }

        .badge.inactive {
            background-color: var(--warning-color);
        }

    .empty-state {
        padding: 3rem;
        text-align: center;
    }

    .empty-icon {
        font-size: 3rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

    .pagination .page-item.active .page-link {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .pagination .page-link {
        color: var(--primary-color);
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

        .action-buttons .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

    @@media (max-width: 768px) {
        .guarantors-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .header-actions {
            width: 100%;
        }

        .search-box input {
            width: 100%;
        }

        .add-guarantor-btn {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<div >
    <!-- Header Section -->
    <div class="guarantors-header">
        <div class="header-title">
            <i class="bi bi-people-fill header-icon"></i>
            <h2>Guarantors Management</h2>
        </div>

        <!-- Search and Add Button -->
        <div class="header-actions">
            <div class="search-box">
                <i class="bi bi-search"></i>
                <input type="text"
                       class="form-control"
                       placeholder="Search guarantors..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
            </div>

            <button class="btn btn-primary add-guarantor-btn"
                    @onclick="NavigateToAddGuarantor">
                <i class="bi bi-plus-circle"></i>
                <span>Add Guarantor</span>
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="summary-cards">
        <div class="row">
            <!-- Total Guarantors Card -->
            <div class="col-md-4">
                <div class="card summary-card total">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Total Guarantors</h6>
                                <h3>@totalGuarantors</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-people-fill"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Guarantors Card -->
            <div class="col-md-4">
                <div class="card summary-card active">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Active</h6>
                                <h3>@activeGuarantors</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-check-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Inactive Guarantors Card -->
            <div class="col-md-4">
                <div class="card summary-card inactive">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Inactive</h6>
                                <h3>@inactiveGuarantors</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-x-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Guarantors Table -->
    <div class="guarantors-table-container">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading guarantors...</p>
            </div>
        }
        else if (filteredGuarantors.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>ID Number</th>
                            <th>Phone</th>
                            <th>Status</th>
                            <th>Loans Guaranteed</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var guarantor in pagedGuarantors)
                        {
                            <tr>
                                <td>@($"GR-{guarantor.GuarantorId.ToString("D3")}")</td>
                                <td>
                                    <div class="fw-semibold">@guarantor.FirstName @guarantor.LastName</div>
                                    <small class="text-muted">@guarantor.Email</small>
                                </td>
                                <td>@guarantor.IDNumber</td>
                                <td>@guarantor.PhoneNumber</td>
                                <td>
                                    <span class="badge @(guarantor.IsActive ? "active" : "inactive")">
                                        @(guarantor.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>@(guarantor.LoanGuarantors?.Count ?? 0)</td>
                                <td class="text-end">
                                    <div class="action-buttons">
                                        <button class="btn btn-outline-primary btn-sm"
                                                @onclick="() => ViewGuarantor(guarantor.GuarantorId)"
                                                title="View">View
                                        </button>
                                        <button class="btn btn-outline-secondary btn-sm"
                                                @onclick="() => EditGuarantor(guarantor.GuarantorId)"
                                                title="Edit">Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm"
                                                @onclick="() => ConfirmDelete(guarantor)"
                                                title="Delete">Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <nav class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            }
        }
        else
        {
            <div class="empty-state text-center py-5">
                <i class="bi bi-people empty-icon"></i>
                <h4>No guarantors found</h4>
                <p>Try adjusting your search or add a new guarantor</p>
                <button class="btn btn-primary" @onclick="NavigateToAddGuarantor">
                    <i class="bi bi-plus-circle me-2"></i>
                    Add Guarantor
                </button>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Delete guarantor <strong>@($"GR-{guarantorToDelete?.GuarantorId.ToString("D3")}")</strong>?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                    @if (guarantorToDelete?.LoanGuarantors?.Count > 0)
                    {
                        <div class="alert alert-warning mt-3">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            This guarantor is associated with @guarantorToDelete.LoanGuarantors.Count loans and cannot be deleted.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger"
                            @onclick="DeleteGuarantor"
                            disabled="@(guarantorToDelete?.LoanGuarantors?.Count > 0)">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HttpClient Http => _httpClientFactory.CreateClient("ApiClient");
    private List<Guarantor> guarantors = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    // Search property
    private string searchTerm = string.Empty;

    // Pagination properties
    private int currentPage = 1;
    private const int pageSize = 10;

    // Delete modal properties
    private bool showDeleteModal = false;
    private Guarantor? guarantorToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadGuarantors();
    }

    private async Task LoadGuarantors()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Force UI update

            var response = await Http.GetFromJsonAsync<List<Guarantor>>("api/guarantors");

            if (response != null)
            {
                guarantors = response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load guarantors. Please try again.";
            Console.WriteLine($"Error loading guarantors: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Summary calculations
    private int totalGuarantors => filteredGuarantors.Count();
    private int activeGuarantors => filteredGuarantors.Count(g => g.IsActive);
    private int inactiveGuarantors => filteredGuarantors.Count(g => !g.IsActive);

    // Filtered guarantors based on search
    private IEnumerable<Guarantor> filteredGuarantors => guarantors
        .Where(g => string.IsNullOrEmpty(searchTerm) ||
                   g.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   g.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   g.IDNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   g.PhoneNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    // Paginated results
    private IEnumerable<Guarantor> pagedGuarantors => filteredGuarantors
        .OrderBy(g => g.LastName)
        .ThenBy(g => g.FirstName)
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    // Calculate total pages for pagination
    private int totalPages => (int)Math.Ceiling((double)filteredGuarantors.Count() / pageSize);

    // Navigation methods
    private void NavigateToAddGuarantor() => NavigationManager.NavigateTo("/guarantors/add");
    private void ViewGuarantor(int id) => NavigationManager.NavigateTo($"/guarantors/view/{id}");
    private void EditGuarantor(int id) => NavigationManager.NavigateTo($"/guarantors/edit/{id}");

    // Delete confirmation methods
    private void ConfirmDelete(Guarantor guarantor)
    {
        guarantorToDelete = guarantor;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        guarantorToDelete = null;
    }

    private async Task DeleteGuarantor()
    {
        if (guarantorToDelete != null)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/guarantors/{guarantorToDelete.GuarantorId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadGuarantors();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = error;
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                Console.WriteLine($"Error deleting guarantor: {ex.Message}");
            }

            showDeleteModal = false;
            guarantorToDelete = null;
        }
    }

    // Pagination navigation
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }
}
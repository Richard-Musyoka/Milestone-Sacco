@page "/loans"
@using Microsoft.AspNetCore.Components
@using SaccoManagementSystem.Models
@inject NavigationManager NavigationManager
@inject IHttpClientFactory _httpClientFactory

<div class="loans-container">
    <!-- Header Section -->
    <div class="loans-header mb-4">
        <div class="header-title">
            <i class="bi bi-cash-coin header-icon"></i>
            <h2>Loan Applications</h2>
        </div>

        <div class="header-actions">
            <div class="search-box">
                <i class="bi bi-search"></i>
                <input type="text"
                       class="form-control"
                       placeholder="Search loans..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
            </div>

            <button class="btn btn-primary add-loan-btn"
                    @onclick="NavigateToApplyLoan">
                <i class="bi bi-plus-circle"></i>
                <span>Apply for Loan</span>
            </button>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="filters mb-3">
        <div class="row g-2">
            <div class="col-md-4">
                <select class="form-select" @bind="loanStatusFilter">
                    <option value="">All Statuses</option>
                    <option value="Pending">Pending</option>
                    <option value="Approved">Approved</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Disbursed">Disbursed</option>
                </select>
            </div>

            <div class="col-md-4">
                <select class="form-select" @bind="loanTypeFilter">
                    <option value="">All Types</option>
                    <option value="Emergency">Emergency</option>
                    <option value="Education">Education</option>
                    <option value="Business">Business</option>
                    <option value="Personal">Personal</option>
                </select>
            </div>

            <div class="col-md-4">
                <button class="btn btn-outline-secondary w-100" @onclick="ResetFilters">
                    <i class="bi bi-arrow-counterclockwise"></i> Reset
                </button>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="summary-cards mb-4">
        <div class="row">
            <div class="col-md-3">
                <div class="card summary-card pending">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Pending Loans</h6>
                                <h3>@pendingLoansCount</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-hourglass"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card summary-card approved">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Approved Loans</h6>
                                <h3>@approvedLoansCount</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-check-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card summary-card disbursed">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Disbursed Loans</h6>
                                <h3>@disbursedLoansCount</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-cash-stack"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card summary-card total">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Total Amount</h6>
                                <h3>@totalLoanAmount.ToString("C")</h3>
                            </div>
                            <div class="icon">
                                <i class="bi bi-wallet2"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loans Table -->
    <div class="loans-table-container">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading loans...</p>
            </div>
        }
        else if (filteredLoans.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Loan ID</th>
                            <th>Member</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Applied Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var loan in pagedLoans)
                        {
                            <tr>
                                <td>@loan.LoanNumber</td>
                                <td>
                                    <div class="member-name">@loan.MemberName</div>
                                    <small class="text-muted">ID: @loan.MemberId</small>
                                </td>
                                <td>@loan.LoanType</td>
                                <td>@loan.PrincipalAmount.ToString("C")</td>
                                <td>@loan.ApplicationDate.ToShortDateString()</td>
                                <td>
                                    <span class="badge @GetStatusClass(loan.Status)">
                                        @loan.Status
                                    </span>
                                </td>
                                <td class="text-end">
                                    <button class="btn btn-outline-primary btn-sm"
                                            @onclick="() => ViewLoan(loan.LoanId)"
                                            title="View">
                                        View
                                    </button>
                                    <button class="btn btn-outline-info btn-sm"
                                            @onclick="() => ViewSchedule(loan.LoanId)"
                                            title="Repayment Schedule">
                                        Schedule
                                    </button>
                                    @if (loan.Status == "Pending")
                                    {
                                        <button class="btn btn-outline-success btn-sm"
                                                @onclick="() => ApproveLoan(loan.LoanId)"
                                                title="Approve">
                                            Approve
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm"
                                                @onclick="() => RejectLoan(loan.LoanId)"
                                                title="Reject">
                                            Reject
                                        </button>
                                    }
                                    @if (loan.Status == "Approved")
                                    {
                                        <button class="btn btn-outline-warning btn-sm"
                                                @onclick="() => DisburseLoan(loan.LoanId)"
                                                title="Disburse">
                                            Disburse
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <nav class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            }
        }
        else
        {
            <div class="empty-state text-center py-5">
                <i class="bi bi-cash-coin empty-icon"></i>
                <h4>No loan applications found</h4>
                <p>Try adjusting your search or apply for a new loan</p>
                <button class="btn btn-primary" @onclick="NavigateToApplyLoan">
                    <i class="bi bi-plus-circle me-2"></i>
                    Apply for Loan
                </button>
            </div>
        }
    </div>
</div>

<!-- Status Change Confirmation Modal -->
@if (showStatusModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm @statusAction</h5>
                    <button type="button" class="btn-close" @onclick="CancelStatusChange"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to @statusAction.ToLower() loan <strong>@loanToUpdate?.LoanNumber</strong>?</p>
                    @if (statusAction == "Approve")
                    {
                        <div class="mb-3">
                            <label class="form-label">Interest Rate (%)</label>
                            <input type="number" class="form-control" @bind="interestRate" step="0.01" min="0" max="100" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Repayment Period (months)</label>
                            <input type="number" class="form-control" @bind="repaymentPeriod" min="1" max="60" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Remarks</label>
                            <textarea class="form-control" @bind="remarks"></textarea>
                        </div>
                    }
                    else if (statusAction == "Reject")
                    {
                        <div class="mb-3">
                            <label class="form-label">Reason for Rejection</label>
                            <textarea class="form-control" @bind="remarks"></textarea>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelStatusChange">
                        Cancel
                    </button>
                    <button type="button" class="btn @(statusAction == "Reject" ? "btn-danger" : "btn-primary")" @onclick="ConfirmStatusChange">
                        @statusAction
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HttpClient Http => _httpClientFactory.CreateClient("ApiClient");
    private List<LoanViewModel> loans = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    // Filter properties
    private string searchTerm = string.Empty;
    private string loanStatusFilter = string.Empty;
    private string loanTypeFilter = string.Empty;

    // Status change properties
    private bool showStatusModal = false;
    private LoanViewModel? loanToUpdate = null;
    private string statusAction = string.Empty;
    private double interestRate = 10;
    private int repaymentPeriod = 12;
    private string remarks = string.Empty;

    // Pagination properties
    private int currentPage = 1;
    private const int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadLoans();
    }

    private async Task LoadLoans()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged(); // Force UI update to show loading state

            var response = await Http.GetAsync("api/loans/get-all");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Response: {content}"); // Debug output

                loans = await response.Content.ReadFromJsonAsync<List<LoanViewModel>>();
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}";
                Console.WriteLine($"API Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load loans: {ex.Message}";
            Console.WriteLine($"Exception: {errorMessage}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Force UI update after loading
        }
    }

    // Summary calculations
    private int pendingLoansCount => filteredLoans.Count(l => l.Status == "Pending");
    private int approvedLoansCount => filteredLoans.Count(l => l.Status == "Approved");
    private int disbursedLoansCount => filteredLoans.Count(l => l.Status == "Disbursed");
    private decimal totalLoanAmount => filteredLoans.Sum(l => l.PrincipalAmount);

    // Filtered loans
    private IEnumerable<LoanViewModel> filteredLoans => loans
        .Where(l => string.IsNullOrEmpty(searchTerm) ||
                   l.MemberName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   l.LoanNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   l.MemberId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(l => string.IsNullOrEmpty(loanStatusFilter) || l.Status == loanStatusFilter)
        .Where(l => string.IsNullOrEmpty(loanTypeFilter) || l.LoanType == loanTypeFilter);

    // Paginated loans
    private IEnumerable<LoanViewModel> pagedLoans => filteredLoans
        .OrderByDescending(l => l.ApplicationDate)
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    // Total pages
    private int totalPages => (int)Math.Ceiling((double)filteredLoans.Count() / pageSize);

    // Helper methods
    private string GetStatusClass(string status) => status switch
    {
        "Pending" => "bg-warning text-dark",
        "Approved" => "bg-info",
        "Disbursed" => "bg-success",
        "Rejected" => "bg-danger",
        _ => "bg-secondary"
    };

    // Navigation methods
    private void NavigateToApplyLoan() => NavigationManager.NavigateTo("/loans/apply");
    private void ViewLoan(int id) => NavigationManager.NavigateTo($"/loans/view/{id}");
    private void ViewSchedule(int id) => NavigationManager.NavigateTo($"/loans/schedule/{id}");

    // Filter methods
    private void ResetFilters()
    {
        searchTerm = string.Empty;
        loanStatusFilter = string.Empty;
        loanTypeFilter = string.Empty;
        currentPage = 1;
    }

    // Status change methods
    private void ApproveLoan(int id)
    {
        loanToUpdate = loans.FirstOrDefault(l => l.LoanId == id);
        statusAction = "Approve";
        interestRate = 10; // Default value
        repaymentPeriod = 12; // Default value
        showStatusModal = true;
    }

    private void RejectLoan(int id)
    {
        loanToUpdate = loans.FirstOrDefault(l => l.LoanId == id);
        statusAction = "Reject";
        showStatusModal = true;
    }

    private async Task DisburseLoan(int id)
    {
        try
        {
            var response = await Http.PutAsync($"api/loans/disburse/{id}", null);

            if (response.IsSuccessStatusCode)
            {
                await LoadLoans();
            }
            else
            {
                errorMessage = "Failed to disburse loan";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error disbursing loan: {ex.Message}";
        }
    }

    private void CancelStatusChange()
    {
        showStatusModal = false;
        loanToUpdate = null;
        statusAction = string.Empty;
        remarks = string.Empty;
    }

    private async Task ConfirmStatusChange()
    {
        if (loanToUpdate == null) return;

        try
        {
            if (statusAction == "Approve")
            {
                var approvalDto = new
                {
                    InterestRate = (decimal)interestRate,
                    TermMonths = repaymentPeriod,
                    Remarks = remarks
                };

                var response = await Http.PutAsJsonAsync($"api/loans/approve/{loanToUpdate.LoanId}", approvalDto);

                if (response.IsSuccessStatusCode)
                {
                    await LoadLoans();
                }
                else
                {
                    errorMessage = "Failed to approve loan";
                }
            }
            else if (statusAction == "Reject")
            {
                var response = await Http.PutAsJsonAsync($"api/loans/reject/{loanToUpdate.LoanId}", remarks);

                if (response.IsSuccessStatusCode)
                {
                    await LoadLoans();
                }
                else
                {
                    errorMessage = "Failed to reject loan";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing {statusAction}: {ex.Message}";
        }
        finally
        {
            showStatusModal = false;
            loanToUpdate = null;
            statusAction = string.Empty;
            remarks = string.Empty;
        }
    }

    // Pagination
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }
}
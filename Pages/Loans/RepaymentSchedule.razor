@page "/loans/schedule/{LoanId:int}"
@using SaccoManagementSystem.Models
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --success-color: #4cc9f0;
        --warning-color: #f8961e;
        --danger-color: #f94144;
        --light-color: #f8f9fa;
        --dark-color: #212529;
        --border-radius: 0.5rem;
        --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .schedule-container {
        max-width: 1400px;
        margin: 2rem auto;
        padding: 0 1.5rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .schedule-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .header-icon {
        font-size: 1.8rem;
        color: var(--primary-color);
    }

    .back-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        transition: var(--transition);
        background: transparent;
        color: var(--dark-color);
        border: 1px solid #dee2e6;
    }

        .back-btn:hover {
            background: #f8f9fa;
        }

    .loan-summary-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .summary-item {
        margin-bottom: 1rem;
    }

    .summary-label {
        font-weight: 500;
        color: #6c757d;
        font-size: 0.9rem;
        display: block;
        margin-bottom: 0.25rem;
    }

    .summary-value {
        font-weight: 600;
        color: var(--dark-color);
        font-size: 1.1rem;
    }

    .schedule-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
    }

    .card-header {
        background: #f8f9fa;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .card-header h4 {
            margin: 0;
            font-weight: 600;
            color: var(--dark-color);
        }

    .badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 600;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.375rem;
    }

    .bg-success {
        background-color: var(--success-color);
        color: white;
    }

    .bg-warning {
        background-color: var(--warning-color);
        color: white;
    }

    .bg-danger {
        background-color: var(--danger-color);
        color: white;
    }

    .bg-info {
        background-color: var(--primary-color);
        color: white;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
        border-collapse: collapse;
    }

        .table thead th {
            vertical-align: bottom;
            border-bottom: 2px solid #dee2e6;
            padding: 0.75rem;
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
            text-align: left;
        }

        .table tbody tr {
            transition: var(--transition);
        }

            .table tbody tr:hover {
                background-color: rgba(0, 0, 0, 0.02);
            }

        .table tbody td {
            padding: 0.75rem;
            vertical-align: middle;
            border-top: 1px solid #dee2e6;
        }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.03);
    }

    .status-badge {
        min-width: 80px;
        text-align: center;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        border-radius: 0.2rem;
    }

    .btn-outline-primary {
        color: var(--primary-color);
        border-color: var(--primary-color);
        background-color: transparent;
    }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: white;
        }

    .overdue-row {
        background-color: rgba(248, 150, 30, 0.05) !important;
    }

    .paid-row {
        background-color: rgba(76, 201, 240, 0.05);
    }

    .card-footer {
        background: #f8f9fa;
        padding: 1rem 1.5rem;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
    }

    .footer-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .footer-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

        .footer-item:last-child {
            border-bottom: none;
        }

    .footer-label {
        font-weight: 500;
        color: #6c757d;
    }

    .footer-value {
        font-weight: 600;
        color: var(--dark-color);
    }

    .total-item {
        font-size: 1.1rem;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1040;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1050;
        width: 100%;
        height: 100%;
        overflow-x: hidden;
        overflow-y: auto;
        outline: 0;
    }

    .modal-dialog {
        position: relative;
        width: auto;
        margin: 0.5rem;
        pointer-events: none;
    }

    .modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        pointer-events: auto;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid rgba(0, 0, 0, 0.2);
        border-radius: 0.3rem;
        outline: 0;
    }

    .modal-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-title {
        margin-bottom: 0;
        line-height: 1.5;
    }

    .modal-body {
        position: relative;
        flex: 1 1 auto;
        padding: 1rem;
    }

    .modal-footer {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }

    .payment-details {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
    }

        .payment-details div {
            margin-bottom: 0.5rem;
        }

        .payment-details strong {
            min-width: 120px;
            display: inline-block;
        }

    @@media (max-width: 768px) {
        .schedule-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .summary-grid {
            grid-template-columns: 1fr;
        }

        .footer-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="schedule-container">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Loading repayment schedule...</span>
        </div>
    }
    else if (loan == null)
    {
        <div class="alert alert-danger">
            Loan not found. Please check the loan ID and try again.
        </div>
    }
    else
    {
        <!-- Header Section -->
        <div class="schedule-header">
            <button class="back-btn" @onclick="ReturnToLoanDetails">
                <i class="bi bi-arrow-left"></i> Back to Loan
            </button>
            <div class="header-title">
                <i class="bi bi-calendar-check header-icon"></i>
                <h2>Repayment Schedule for @loan.LoanNumber</h2>
            </div>
        </div>

        <!-- Loan Summary Card -->
        <div class="loan-summary-card">
            <div class="summary-grid">
                <div>
                    <div class="summary-item">
                        <span class="summary-label">Member</span>
                        <span class="summary-value">@loan.MemberName (ID: @loan.MemberId)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Loan Type</span>
                        <span class="summary-value">@loan.LoanType</span>
                    </div>
                </div>
                <div>
                    <div class="summary-item">
                        <span class="summary-label">Principal Amount</span>
                        <span class="summary-value">@loan.PrincipalAmount.ToString("C")</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Interest Rate</span>
                        <span class="summary-value">@loan.InterestRate.ToString("0.00")% p.a.</span>
                    </div>
                </div>
                <div>
                    <div class="summary-item">
                        <span class="summary-label">Term</span>
                        <span class="summary-value">@loan.TermMonths months</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Total Repayable</span>
                        <span class="summary-value">@totalRepayable.ToString("C")</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Repayment Schedule Card -->
        <div class="schedule-card">
            <div class="card-header">
                <h4>Installment Schedule</h4>
                <div class="status-badge">
                    <span class="badge @GetStatusClass(loan.Status)">@loan.Status</span>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Due Date</th>
                            <th class="text-end">Principal</th>
                            <th class="text-end">Interest</th>
                            <th class="text-end">Total Due</th>
                            <th>Status</th>
                            <th>Payment Date</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var installment in repaymentSchedule)
                        {
                            <tr class="@(installment.Status == "Overdue" ? "overdue-row" : installment.Status == "Paid" ? "paid-row" : "")">
                                <td>@installment.InstallmentNumber</td>
                                <td>@installment.DueDate.ToString("dd MMM yyyy")</td>
                                <td class="text-end">@installment.Principal.ToString("C")</td>
                                <td class="text-end">@installment.Interest.ToString("C")</td>
                                <td class="text-end">@installment.TotalDue.ToString("C")</td>
                                <td>
                                    <span class="badge @GetPaymentStatusClass(installment.Status)">
                                        @installment.Status
                                    </span>
                                </td>
                                <td>@(installment.PaymentDate.HasValue ? installment.PaymentDate.Value.ToString("dd MMM yyyy") : "-")</td>
                                <td class="text-end">
                                    @if (installment.Status == "Pending" && loan.Status == "Disbursed")
                                    {
                                        <button class="btn btn-sm btn-outline-primary"
                                                @onclick="() => ShowPaymentModal(installment)">
                                            <i class="bi bi-check-lg"></i> Mark Paid
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer">
                <div class="footer-grid">
                    <div>
                        <div class="footer-item">
                            <span class="footer-label">Total Principal:</span>
                            <span class="footer-value">@loan.PrincipalAmount.ToString("C")</span>
                        </div>
                        <div class="footer-item">
                            <span class="footer-label">Total Interest:</span>
                            <span class="footer-value">@totalInterest.ToString("C")</span>
                        </div>
                    </div>
                    <div>
                        <div class="footer-item">
                            <span class="footer-label">Total Paid:</span>
                            <span class="footer-value">@totalPaid.ToString("C")</span>
                        </div>
                        <div class="footer-item total-item">
                            <span class="footer-label">Outstanding Balance:</span>
                            <span class="footer-value">@balance.ToString("C")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Payment Confirmation Modal -->
@if (showPaymentModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Payment</h5>
                    <button type="button" class="btn-close" @onclick="ClosePaymentModal"></button>
                </div>
                <div class="modal-body">
                    <p>Mark this installment as paid?</p>
                    <div class="payment-details">
                        <div><strong>Installment #:</strong> @installmentToPay?.InstallmentNumber</div>
                        <div><strong>Due Date:</strong> @installmentToPay?.DueDate.ToString("dd MMM yyyy")</div>
                        <div><strong>Amount:</strong> @installmentToPay?.TotalDue.ToString("C")</div>
                    </div>
                    <div class="mt-3">
                        <label class="form-label">Payment Date</label>
                        <input type="date" class="form-control" @bind="paymentDate" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePaymentModal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmPayment" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <i class="bi bi-check-circle me-1"></i>
                            <span>Confirm Payment</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int LoanId { get; set; }

    private LoanViewModel? loan;
    private List<InstallmentViewModel> repaymentSchedule = new();
    private bool isLoading = true;
    private decimal totalRepayable;
    private decimal totalInterest;
    private decimal totalPaid;
    private decimal balance;
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    // Payment modal
    private bool showPaymentModal = false;
    private bool isProcessing = false;
    private InstallmentViewModel? installmentToPay;
    private DateTime paymentDate = DateTime.Today;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadLoanDetails();
        await LoadRepaymentSchedule();
        CalculateTotals();
    }

    private async Task LoadLoanDetails()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<LoanViewModel>($"api/loans/get/{LoanId}");
            if (response != null)
            {
                loan = response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading loan: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task LoadRepaymentSchedule()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<InstallmentViewModel>>($"api/loans/installments/{LoanId}");
            if (response != null)
            {
                repaymentSchedule = response.OrderBy(i => i.InstallmentNumber).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repayment schedule: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateTotals()
    {
        if (loan == null) return;

        totalInterest = repaymentSchedule.Sum(i => i.Interest);
        totalRepayable = loan.PrincipalAmount + totalInterest;
        totalPaid = repaymentSchedule.Where(i => i.Status == "Paid").Sum(i => i.TotalDue);
        balance = totalRepayable - totalPaid;
    }

    private void ShowPaymentModal(InstallmentViewModel installment)
    {
        installmentToPay = installment;
        paymentDate = DateTime.Today;
        errorMessage = null;
        showPaymentModal = true;
    }

    private async Task ConfirmPayment()
    {
        if (installmentToPay == null) return;

        isProcessing = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var paymentDto = new
            {
                InstallmentId = installmentToPay.InstallmentId,
                PaymentDate = paymentDate
            };

            var response = await Http.PutAsJsonAsync($"api/loans/mark-paid", paymentDto);

            if (response.IsSuccessStatusCode)
            {
                // Refresh the data
                await LoadRepaymentSchedule();
                CalculateTotals();
                showPaymentModal = false;
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = $"Error marking payment: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error confirming payment: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ClosePaymentModal()
    {
        showPaymentModal = false;
        installmentToPay = null;
        errorMessage = null;
    }

    private void ReturnToLoanDetails()
    {
        NavigationManager.NavigateTo($"/loans");
    }

    private string GetStatusClass(string status) => status switch
    {
        "Pending" => "bg-warning",
        "Approved" => "bg-info",
        "Disbursed" => "bg-success",
        "Rejected" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetPaymentStatusClass(string status) => status switch
    {
        "Paid" => "bg-success",
        "Overdue" => "bg-danger",
        _ => "bg-warning"
    };

    // DTO for marking payment
    private class MarkPaymentDto
    {
        public int InstallmentId { get; set; }
        public DateTime PaymentDate { get; set; }
    }
}
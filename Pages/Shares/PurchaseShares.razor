@page "/shares/purchase"
@page "/shares/purchase/{MemberId}"
@using Microsoft.AspNetCore.Components
@using SaccoManagementSystem.Models
@using static Sacco_Management_System.Pages.Members.ListMember
@inject NavigationManager NavigationManager
@inject IHttpClientFactory _httpClientFactory

<div>
    <div class="card">
        <div class="card-header">
            <h3>
                <i class="bi bi-pie-chart-fill me-2"></i>
                @(MemberId == 0 ? "Purchase New Shares" : "Purchase Additional Shares")
            </h3>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading member data...</p>
                </div>
            }
            else
            {
                <EditForm Model="@purchaseDto" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Member</label>
                            @if (MemberId == 0)
                            {
                                <InputSelect class="form-select" @bind-Value="purchaseDto.MemberId">
                                    <option value="">Select Member</option>
                                    @foreach (var member in members)
                                    {
                                        <option value="@member.MemberId">@member.FullName (@member.MemberNo)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => purchaseDto.MemberId)" />
                            }
                            else
                            {
                                <input type="text" class="form-control" value="@member?.FullName (@member?.MemberNo)" disabled />
                                <input type="hidden" @bind="purchaseDto.MemberId" />
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Purchase Date</label>
                            <InputDate class="form-control" @bind-Value="purchaseDto.PurchaseDate" />
                            <ValidationMessage For="@(() => purchaseDto.PurchaseDate)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Number of Units</label>
                            <InputNumber class="form-control" @bind-Value="purchaseDto.Units" />
                            <ValidationMessage For="@(() => purchaseDto.Units)" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Unit Price</label>
                            <InputNumber class="form-control" @bind-Value="purchaseDto.UnitPrice" />
                            <ValidationMessage For="@(() => purchaseDto.UnitPrice)" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Share Type</label>
                            <InputSelect class="form-select" @bind-Value="purchaseDto.ShareType">
                                @foreach (var type in ShareTypes.All)
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => purchaseDto.ShareType)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Remarks</label>
                        <InputTextArea class="form-control" @bind-Value="purchaseDto.Remarks" />
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="Cancel">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-1"></i>
                            Confirm Purchase
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private HttpClient Http => _httpClientFactory.CreateClient("ApiClient");
    private SharePurchaseDto purchaseDto = new();
    private List<Member> members = new();
    private Member? member;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    [Parameter]
    public int MemberId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        purchaseDto.PurchaseDate = DateTime.Now;
        purchaseDto.Status = "Active"; // Set default status
        purchaseDto.ShareType = "Ordinary"; // Set default share type

        try
        {
            // Load members list
            var response = await Http.GetAsync("api/members");
            if (response.IsSuccessStatusCode)
            {
                members = await response.Content.ReadFromJsonAsync<List<Member>>();
            }

            // If MemberId is specified, load member details
            if (MemberId != 0)
            {
                purchaseDto.MemberId = MemberId;
                member = members.FirstOrDefault(m => m.MemberId == MemberId);

                // Get current share price
                var priceResponse = await Http.GetAsync("api/shares/summary");
                if (priceResponse.IsSuccessStatusCode)
                {
                    var summary = await priceResponse.Content.ReadFromJsonAsync<ShareSummaryDto>();
                    purchaseDto.UnitPrice = summary?.CurrentSharePrice ?? 100.00m; // Default price if null
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/shares/add", purchaseDto);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/shares");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Purchase failed: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/shares");
    }
}
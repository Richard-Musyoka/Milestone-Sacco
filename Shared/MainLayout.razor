@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using System.Security.Claims
@inherits LayoutComponentBase

<PageTitle>Sacco Management System</PageTitle>

<div class="page-container">
    <aside class="sidebar">
        <NavMenu />
    </aside>

    <main class="main-content">
        <!-- Top Navigation Bar -->
        <div class="top-navbar">
            <div class="navbar-content container-fluid">
                <!-- Greeting & Date -->
                <div class="greeting-section">
                    <div class="greeting-icon">
                        <i class="bi @GetGreetingIcon"></i>
                    </div>
                    <div class="greeting-text">
                        <span class="greeting">@Greeting</span>
                        <span class="current-date">@DateTime.Now.ToString("dddd, MMM d, yyyy")</span>
                    </div>
                </div>


                <!-- User Menu -->
                <div class="user-menu-section">
                    <div class="dropdown">
                        <button class="user-menu-btn" type="button" id="userDropdown"
                                data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="user-avatar-container">
                                <img src="/images/default-avatar.png" alt="User" class="user-avatar">
                                <span class="user-status online"></span>
                            </div>
                            <div class="user-info d-none d-lg-block">
                                <div class="user-name">John Doe</div>
                                <div class="user-role">Admin</div>
                            </div>
                            <i class="bi bi-chevron-down dropdown-arrow"></i>
                        </button>

                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                            <li>
                                <a class="dropdown-item" href="/profile">
                                    <i class="bi bi-person me-2"></i> My Profile
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="/settings">
                                    <i class="bi bi-gear me-2"></i> Settings
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="/notifications">
                                    <i class="bi bi-bell me-2"></i> Notifications
                                    <span class="badge bg-danger float-end">3</span>
                                </a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <a class="dropdown-item" @onclick="Logout">
                                    <i class="bi bi-box-arrow-right me-2"></i> Logout
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="content-container">
            @Body
        </div>
    </main>
</div>

@code {
    [Inject]
    protected NavigationManager Navigation { get; set; } = null!;

    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    private string Greeting
    {
        get
        {
            var hour = DateTime.Now.Hour;
            if (hour < 12) return "Good morning";
            if (hour < 18) return "Good afternoon";
            return "Good evening";
        }
    }

    private string GetGreetingIcon
    {
        get
        {
            var hour = DateTime.Now.Hour;
            if (hour < 12) return "bi-sun";
            if (hour < 18) return "bi-brightness-high";
            return "bi-moon-stars";
        }
    }

    private async Task Logout()
    {
        try
        {
            // Clear authentication state
            if (AuthenticationStateProvider is IHostEnvironmentAuthenticationStateProvider provider)
            {
                provider.SetAuthenticationState(
                    Task.FromResult(new AuthenticationState(new ClaimsPrincipal())));
            }

            // Navigate to login page with full reload
            Navigation.NavigateTo("/Login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
}

